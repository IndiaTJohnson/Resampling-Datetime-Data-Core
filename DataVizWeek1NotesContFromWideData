{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f2d43f1c-34ee-4c58-a5ca-10dd3b06937f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import os\n",
    "# set random seed\n",
    "SEED = 321\n",
    "np.random.seed(SEED)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "08df0736-b360-49b2-a008-4dc3d80d7d2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Customization Options\n",
    "# plt.style.use(['fivethirtyeight'])#'seaborn-talk'])#,\n",
    "plt.rcParams['figure.facecolor']='white'\n",
    "plt.rcParams['figure.figsize']=(12,4)\n",
    "#import tick customization tools\n",
    "import matplotlib.ticker as mticks\n",
    "import matplotlib.dates as mdates\n",
    "sns.set_context(\"talk\", font_scale=0.9)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9e32b0c7-11e7-472c-8a72-274a52e0d477",
   "metadata": {},
   "outputs": [],
   "source": [
    "def format_xdates(ax, fig=None, xtick_fontweight='bold',\n",
    "               title= None):\n",
    "    \"\"\"Formats x-axis with minor ticks every 3 months, and major \n",
    "    ticks every year. Includes different grid options for visibility\"\"\"\n",
    "    # create the locator to place ticks every 3 months.\n",
    "    loc_3months = mdates.MonthLocator(interval=3)\n",
    "    fmt_months = mdates.DateFormatter(\"%b\")\n",
    "    ## for major year ticks\n",
    "    loc_year = mdates.YearLocator()\n",
    "    fmt_year = mdates.DateFormatter(\"%Y\")\n",
    "    \n",
    "    ## Change the font of the major ticks to stand out\n",
    "    ax.set_xticks(ax.get_xticks())\n",
    "    ax.set_xticklabels(ax.get_xticklabels(), \n",
    "                       fontweight=xtick_fontweight) \n",
    "    \n",
    "    ## customize minor ticks\n",
    "    ax.xaxis.set_minor_locator(loc_3months)\n",
    "    ax.xaxis.set_minor_formatter(fmt_months)\n",
    "    ## customize major ticks\n",
    "    ax.xaxis.set_major_locator(loc_year)\n",
    "    ax.xaxis.set_major_formatter(fmt_year)\n",
    "    ## Making major/minor gridlines visually distince\n",
    "    ax.grid(which='minor',axis='x',ls=\":\")\n",
    "    ax.grid(which='major',axis='x',color='k')\n",
    "    if fig is None:\n",
    "        fig = ax.get_figure()\n",
    "    ## rotate the dates\n",
    "    fig.autofmt_xdate(which='major',rotation=90,ha='center')\n",
    "    return fig,ax\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c9122d78-de57-4860-a5c7-748f6a462387",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Province/State</th>\n",
       "      <th>Country/Region</th>\n",
       "      <th>Lat</th>\n",
       "      <th>Long</th>\n",
       "      <th>1/22/20</th>\n",
       "      <th>1/23/20</th>\n",
       "      <th>1/24/20</th>\n",
       "      <th>1/25/20</th>\n",
       "      <th>1/26/20</th>\n",
       "      <th>1/27/20</th>\n",
       "      <th>...</th>\n",
       "      <th>6/23/22</th>\n",
       "      <th>6/24/22</th>\n",
       "      <th>6/25/22</th>\n",
       "      <th>6/26/22</th>\n",
       "      <th>6/27/22</th>\n",
       "      <th>6/28/22</th>\n",
       "      <th>6/29/22</th>\n",
       "      <th>6/30/22</th>\n",
       "      <th>7/1/22</th>\n",
       "      <th>7/2/22</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>33.939110</td>\n",
       "      <td>67.709953</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>181987</td>\n",
       "      <td>182033</td>\n",
       "      <td>182072</td>\n",
       "      <td>182149</td>\n",
       "      <td>182228</td>\n",
       "      <td>182324</td>\n",
       "      <td>182403</td>\n",
       "      <td>182528</td>\n",
       "      <td>182594</td>\n",
       "      <td>182643</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Albania</td>\n",
       "      <td>41.153300</td>\n",
       "      <td>20.168300</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>278211</td>\n",
       "      <td>278504</td>\n",
       "      <td>278793</td>\n",
       "      <td>279077</td>\n",
       "      <td>279077</td>\n",
       "      <td>279167</td>\n",
       "      <td>280298</td>\n",
       "      <td>280851</td>\n",
       "      <td>281470</td>\n",
       "      <td>282141</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Algeria</td>\n",
       "      <td>28.033900</td>\n",
       "      <td>1.659600</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>266015</td>\n",
       "      <td>266025</td>\n",
       "      <td>266030</td>\n",
       "      <td>266038</td>\n",
       "      <td>266049</td>\n",
       "      <td>266062</td>\n",
       "      <td>266073</td>\n",
       "      <td>266087</td>\n",
       "      <td>266105</td>\n",
       "      <td>266115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Andorra</td>\n",
       "      <td>42.506300</td>\n",
       "      <td>1.521800</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>43774</td>\n",
       "      <td>43774</td>\n",
       "      <td>43774</td>\n",
       "      <td>43774</td>\n",
       "      <td>43774</td>\n",
       "      <td>43774</td>\n",
       "      <td>43774</td>\n",
       "      <td>43774</td>\n",
       "      <td>44177</td>\n",
       "      <td>44177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Angola</td>\n",
       "      <td>-11.202700</td>\n",
       "      <td>17.873900</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>99761</td>\n",
       "      <td>99761</td>\n",
       "      <td>99761</td>\n",
       "      <td>99761</td>\n",
       "      <td>99761</td>\n",
       "      <td>101320</td>\n",
       "      <td>101320</td>\n",
       "      <td>101320</td>\n",
       "      <td>101320</td>\n",
       "      <td>101320</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>280</th>\n",
       "      <td>NaN</td>\n",
       "      <td>West Bank and Gaza</td>\n",
       "      <td>31.952200</td>\n",
       "      <td>35.233200</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>658503</td>\n",
       "      <td>658503</td>\n",
       "      <td>658503</td>\n",
       "      <td>658503</td>\n",
       "      <td>659853</td>\n",
       "      <td>659853</td>\n",
       "      <td>659853</td>\n",
       "      <td>659853</td>\n",
       "      <td>659853</td>\n",
       "      <td>659853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>281</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Winter Olympics 2022</td>\n",
       "      <td>39.904200</td>\n",
       "      <td>116.407400</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>535</td>\n",
       "      <td>535</td>\n",
       "      <td>535</td>\n",
       "      <td>535</td>\n",
       "      <td>535</td>\n",
       "      <td>535</td>\n",
       "      <td>535</td>\n",
       "      <td>535</td>\n",
       "      <td>535</td>\n",
       "      <td>535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>282</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Yemen</td>\n",
       "      <td>15.552727</td>\n",
       "      <td>48.516388</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>11824</td>\n",
       "      <td>11824</td>\n",
       "      <td>11824</td>\n",
       "      <td>11824</td>\n",
       "      <td>11824</td>\n",
       "      <td>11824</td>\n",
       "      <td>11824</td>\n",
       "      <td>11824</td>\n",
       "      <td>11824</td>\n",
       "      <td>11824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>283</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Zambia</td>\n",
       "      <td>-13.133897</td>\n",
       "      <td>27.849332</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>324922</td>\n",
       "      <td>325110</td>\n",
       "      <td>325110</td>\n",
       "      <td>325110</td>\n",
       "      <td>325348</td>\n",
       "      <td>325498</td>\n",
       "      <td>325498</td>\n",
       "      <td>325857</td>\n",
       "      <td>325857</td>\n",
       "      <td>325857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>284</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>-19.015438</td>\n",
       "      <td>29.154857</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>255136</td>\n",
       "      <td>255309</td>\n",
       "      <td>255309</td>\n",
       "      <td>255355</td>\n",
       "      <td>255383</td>\n",
       "      <td>255383</td>\n",
       "      <td>255520</td>\n",
       "      <td>255586</td>\n",
       "      <td>255586</td>\n",
       "      <td>255586</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>285 rows × 897 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Province/State        Country/Region        Lat        Long  1/22/20  \\\n",
       "0              NaN           Afghanistan  33.939110   67.709953        0   \n",
       "1              NaN               Albania  41.153300   20.168300        0   \n",
       "2              NaN               Algeria  28.033900    1.659600        0   \n",
       "3              NaN               Andorra  42.506300    1.521800        0   \n",
       "4              NaN                Angola -11.202700   17.873900        0   \n",
       "..             ...                   ...        ...         ...      ...   \n",
       "280            NaN    West Bank and Gaza  31.952200   35.233200        0   \n",
       "281            NaN  Winter Olympics 2022  39.904200  116.407400        0   \n",
       "282            NaN                 Yemen  15.552727   48.516388        0   \n",
       "283            NaN                Zambia -13.133897   27.849332        0   \n",
       "284            NaN              Zimbabwe -19.015438   29.154857        0   \n",
       "\n",
       "     1/23/20  1/24/20  1/25/20  1/26/20  1/27/20  ...  6/23/22  6/24/22  \\\n",
       "0          0        0        0        0        0  ...   181987   182033   \n",
       "1          0        0        0        0        0  ...   278211   278504   \n",
       "2          0        0        0        0        0  ...   266015   266025   \n",
       "3          0        0        0        0        0  ...    43774    43774   \n",
       "4          0        0        0        0        0  ...    99761    99761   \n",
       "..       ...      ...      ...      ...      ...  ...      ...      ...   \n",
       "280        0        0        0        0        0  ...   658503   658503   \n",
       "281        0        0        0        0        0  ...      535      535   \n",
       "282        0        0        0        0        0  ...    11824    11824   \n",
       "283        0        0        0        0        0  ...   324922   325110   \n",
       "284        0        0        0        0        0  ...   255136   255309   \n",
       "\n",
       "     6/25/22  6/26/22  6/27/22  6/28/22  6/29/22  6/30/22  7/1/22  7/2/22  \n",
       "0     182072   182149   182228   182324   182403   182528  182594  182643  \n",
       "1     278793   279077   279077   279167   280298   280851  281470  282141  \n",
       "2     266030   266038   266049   266062   266073   266087  266105  266115  \n",
       "3      43774    43774    43774    43774    43774    43774   44177   44177  \n",
       "4      99761    99761    99761   101320   101320   101320  101320  101320  \n",
       "..       ...      ...      ...      ...      ...      ...     ...     ...  \n",
       "280   658503   658503   659853   659853   659853   659853  659853  659853  \n",
       "281      535      535      535      535      535      535     535     535  \n",
       "282    11824    11824    11824    11824    11824    11824   11824   11824  \n",
       "283   325110   325110   325348   325498   325498   325857  325857  325857  \n",
       "284   255309   255355   255383   255383   255520   255586  255586  255586  \n",
       "\n",
       "[285 rows x 897 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "url = \"https://docs.google.com/spreadsheets/d/e/2PACX-1vRtZ3XGbdzViSOsO6Gam4LQAQTSrFMXSAz_CIcBmmQYBv9uuggbGcxUuqXtMeUPiHR9NyI6At3apf5d/pub?output=csv\"\n",
    "df = pd.read_csv(url)\n",
    "df\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "212d6a00-5e0c-432f-97b4-014b564863b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.columns\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0dc0ec89-c011-410a-8bd0-f8288c42c48f",
   "metadata": {},
   "outputs": [],
   "source": [
    "melted = pd.melt(df,id_vars=['Province/State', 'Country/Region', 'Lat', 'Long'] )\n",
    "melted\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9ab864e2-54f5-434d-bf85-9d24944e74f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "melted['Date'] = pd.to_datetime(melted['Date'])\n",
    "melted.info()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "66006cb1-aad7-45d2-ac36-3ba4837d6048",
   "metadata": {},
   "outputs": [],
   "source": [
    "melted = melted.set_index(\"Date\")\n",
    "melted\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2a645862-4b86-4e8d-a54d-0031d8752b3b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "81b3eff6-7141-4411-8456-7c02f6bebd46",
   "metadata": {},
   "outputs": [],
   "source": [
    "## There are 199 unique countries included\n",
    "melted['Country/Region'].nunique()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ddf12cff-93e0-4a1c-884c-a05fe48abc8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_ts.loc['Afghanistan']\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2c51ab26-05eb-4b79-8706-6b9ac9791344",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_ts.loc[pd.IndexSlice[:, '2020'],:]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "882fff86-604c-4f63-bc97-428db15e41d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_ts.loc[pd.IndexSlice['Afghanistan':'Algeria','2020'],:]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "201fe94a-8a45-4411-a199-2201401929f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "countries = ['Canada','Mexico','US']\n",
    "plot_df = df_ts.loc[countries].copy()\n",
    "plot_df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d7a364c1-a0ec-4fe8-b007-ee4e42fd1c61",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aa287fe0-8ae3-4fdb-8ee3-bd1ec225af0d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# level 0 is Country/Region\n",
    "plot_df.index.get_level_values(0)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "256f7e14-ec73-464a-bf65-e50684d51e37",
   "metadata": {},
   "outputs": [],
   "source": [
    "# level 1 is Date\n",
    "plot_df.index.get_level_values(1)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aaff622a-512f-466b-9fbd-d18580acd7a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "unstacked = plot_df.unstack(level=0)\n",
    "unstacked\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f2cbc1c8-9fa5-4498-a063-041ad703e17b",
   "metadata": {},
   "outputs": [],
   "source": [
    "ax = unstacked.plot()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "408db562-427b-40d4-8330-a6d5bddff551",
   "metadata": {},
   "outputs": [],
   "source": [
    "unstacked.columns\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "02ee20f7-952e-4117-9b88-799d1ef47fce",
   "metadata": {},
   "outputs": [],
   "source": [
    "ax = unstacked['Confirmed'].plot()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dcd93ab9-4962-481a-8365-9f8a781cd556",
   "metadata": {},
   "outputs": [],
   "source": [
    "ts_us = df_ts.loc['US', 'Confirmed']\n",
    "ts_us.index\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "adce0514-66a7-4c1d-b4b1-630808bcaaf1",
   "metadata": {},
   "outputs": [],
   "source": [
    "ax = ts_us.plot(style='-',title=\"Cumulative Cases\");\n",
    "format_xdates(ax);\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "af78c134-b87e-4925-9f67-11594996ddce",
   "metadata": {},
   "outputs": [],
   "source": [
    "## check for states\n",
    "df_us = melted[melted['Country/Region']=='US']\n",
    "df_us\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "412ed473-fdb3-4ae7-91a3-25564480c8e0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "883e75b0-cd6f-4488-806f-778bb4e968a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# drop unneeded columns\n",
    "df = df.drop(columns=['fips','lat','long'])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8ed768ca-ffd5-476f-b5ef-cfc9a95e1cc9",
   "metadata": {},
   "outputs": [],
   "source": [
    "## resample as daily freq by state\n",
    "df_ts = df.groupby(\"state_code\").resample(\"D\").sum()\n",
    "df_ts\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "917dfc46-e41e-4b15-a298-4e85d071c889",
   "metadata": {},
   "outputs": [],
   "source": [
    "state_ts = df_ts.loc['NY'].copy()\n",
    "ax = state_ts.plot();\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d12fac6e-93b7-48b4-b881-1cf52056e543",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, ax1 = plt.subplots(figsize=(12,5))\n",
    "## Plot first line on original ax\n",
    "ax1.plot(state_ts.index, state_ts['cases'] ,color='#3b81db',label='Cases')\n",
    "# Make twin axis and plot second line\n",
    "ax2 = ax1.twinx()\n",
    "ax2.plot(state_ts.index ,state_ts['deaths'],label='Deaths',color='orange')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a0fd1fc5-dbc6-43f6-a6b7-a0165c6e4b9c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ef482187-35c6-4d5c-a77b-bb221e8a9e0f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Solution for having two legends\n",
    "# Source: https://samchaaa.medium.com/how-to-plot-two-different-scales-on-one-plot-in-matplotlib-with-legend-46554ba5915a\n",
    "fig, ax1 = plt.subplots(figsize=(12,5))\n",
    "ax1.plot(state_ts.index, state_ts['cases'] ,color='#3b81db',label='Cases')\n",
    "ax1.set_ylabel(\"# of Total Cases\")\n",
    "# Make twin axis\n",
    "ax2 = ax1.twinx()\n",
    "ax2.plot(state_ts.index ,state_ts['deaths'],label='Deaths',color='orange')\n",
    "ax2.set_ylabel(\"# of Total Deaths\")\n",
    "## Removing the grids\n",
    "ax1.grid(False)\n",
    "ax2.grid(False)\n",
    "## Making joined legend\n",
    "lines = ax1.get_lines() + ax2.get_lines()\n",
    "labels = [l.get_label() for l in lines]\n",
    "ax2.legend(lines, labels, loc=0);\n",
    "fig.autofmt_xdate()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d1ceff58-7dd1-49a0-8b68-a99c9bd2273c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "71b63719-8b5e-4e5c-a555-1a9a33d0dcac",
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_compare_cols(state_ts,col1='cases',color1='#3b81db',\n",
    "                      col2='deaths',color2='orange',\n",
    "                     ylabel1=\"# of Total Cases\", ylabel2=\"# of Total Deaths\",\n",
    "                     figsize=(12,5)):\n",
    "    \"\"\"#Solution for having two legends\n",
    "    # Source: https://samchaaa.medium.com/how-to-plot-two-different-scales-on-one-plot-in-matplotlib-with-legend-46554ba5915a\n",
    "    \"\"\"\n",
    "    fig, ax1 = plt.subplots(figsize=figsize)\n",
    "    ax1.plot(state_ts.index, state_ts[col1] ,color=color1,label=col1.title())\n",
    "    ax1.set_ylabel(ylabel1)\n",
    "    # Make twin axis\n",
    "    ax2 = ax1.twinx()\n",
    "    ax2.plot(state_ts.index ,state_ts[col2],label=col2.title(),color=color2)\n",
    "    ax2.set_ylabel(ylabel2)\n",
    "    ## Removing the grids\n",
    "    ax1.grid(False)\n",
    "    ax2.grid(False)\n",
    "    ## Making joined legend\n",
    "    lines = ax1.get_lines() + ax2.get_lines()\n",
    "    labels = [l.get_label() for l in lines]\n",
    "    ax2.legend(lines, labels, loc=0);\n",
    "    fig.autofmt_xdate()\n",
    "    return fig, (ax1,ax2)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f582632a-2122-49ea-893f-a36334feaa89",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig,(ax1,ax2) = plot_compare_cols(state_ts)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f4f1f3f5-d17c-4041-8818-b28ada65eecf",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9712e0e8-f8b7-4524-a629-f644a87b941c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.ticker as mticks\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d976eeda-e4ee-4b52-8654-251608081fdb",
   "metadata": {},
   "outputs": [],
   "source": [
    "str_fmt = mticks.StrMethodFormatter(\"{x:,.0f}\")\n",
    "str_fmt\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "38324d0f-669e-4245-b4e9-cd52a4bf91fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig,(ax1,ax2) = plot_compare_cols(state_ts)\n",
    "ax1.yaxis.set_major_formatter(str_fmt)\n",
    "ax2.yaxis.set_major_formatter(str_fmt)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ee0f3860-680d-4cea-9c87-2d54bdaf2113",
   "metadata": {},
   "outputs": [],
   "source": [
    "def millions(x,pos):\n",
    "    \"\"\"function for use wth matplotlib FuncFormatter -  formats money in millions\"\"\"\n",
    "    new_x = x/1_000_000\n",
    "    return f\"{new_x:,.0f}M\"\n",
    "def thousands(x,pos):\n",
    "    \"\"\"function for use wth matplotlib FuncFormatter -  formats money in millions\"\"\"\n",
    "    new_x = x/1_000\n",
    "    return f\"{new_x:,.0f}K\"\n",
    "# Create the formatters\n",
    "fmt_mill = mticks.FuncFormatter(millions)\n",
    "fmt_thous = mticks.FuncFormatter(thousands)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4fd71aea-1953-497b-8bd3-ac4ebcae0538",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig,(ax1,ax2) = plot_compare_cols(state_ts)\n",
    "## Set the axis' major formatter\n",
    "ax1.yaxis.set_major_formatter(fmt_mill)\n",
    "ax2.yaxis.set_major_formatter(fmt_thous)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "adcc729c-263e-40f8-bf32-a2037579bf02",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "79626422-d558-4127-a45a-51ec00c870a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# create the locator to place ticks every 1 months.\n",
    "loc_3months = mdates.MonthLocator(interval=3)\n",
    "fmt_months = mdates.DateFormatter(\"%b\")\n",
    "## for major year ticks\n",
    "loc_year = mdates.YearLocator()\n",
    "fmt_year = mdates.DateFormatter(\"%Y\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "13ba60e9-22bd-4a19-b41c-2fcc7262b516",
   "metadata": {},
   "outputs": [],
   "source": [
    "final_fig,(ax1,ax2) = plot_compare_cols(state_ts)\n",
    "ax1.set_xlim(left=pd.to_datetime('01/2020'))\n",
    "## Set the y-axes major formatters\n",
    "ax1.yaxis.set_major_formatter(fmt_mill)\n",
    "ax2.yaxis.set_major_formatter(fmt_thous)\n",
    "## customize minor ticks\n",
    "ax1.xaxis.set_minor_locator(loc_3months)\n",
    "ax1.xaxis.set_minor_formatter(fmt_months)\n",
    "# ## customize major ticks\n",
    "ax1.xaxis.set_major_locator(loc_year)\n",
    "ax1.xaxis.set_major_formatter(fmt_year)\n",
    "## Making major/minor gridlines visually different\n",
    "ax1.grid(which='minor',axis='x',ls=\":\",lw=1)\n",
    "ax1.grid(which='major',axis='x',color='k')\n",
    "final_fig.autofmt_xdate(which='major',rotation=90,ha='center')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "155bb869-307d-4df6-9dee-93a6bd8ac6c5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "a586df57-cb5a-4572-b4db-e11e0ade4761",
   "metadata": {},
   "source": [
    "# Time Series Stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d5ebcb5f-5462-40fd-a212-debdfdf94c46",
   "metadata": {},
   "outputs": [],
   "source": [
    "## quick visualization\n",
    "state_code = \"NY\"\n",
    "state_ts = df_ts.loc[state_code].copy()\n",
    "axes = state_ts['cases'].plot(figsize=(12,6),title=f\"{state_code} State\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a79c62ab-f825-4e35-9800-6d68a8cef762",
   "metadata": {},
   "outputs": [],
   "source": [
    "ts_diff = state_ts.diff()\n",
    "ts_diff\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "998daeb0-6ca6-4b0d-ae43-6ad4deba43a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "ax = ts_diff['cases'].plot(title='# of Cases - Differenced')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1e63827f-c175-40f1-a993-3dca473a8cf3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "23778eba-cec0-43c1-91e0-e634c481f3ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "ts_sum = ts_diff.cumsum()\n",
    "ax = ts_sum['cases'].plot(title='Cumulative Sum vs Original Data',\n",
    "                          label='Summed Diff Data',color='black',lw=5)\n",
    "state_ts['cases'].plot(ax=ax,label='Original Data',color='red',lw=2,ls='--')\n",
    "ax.legend();\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e2ad4ca1-1047-4d0f-b5ea-b77010e67c9b",
   "metadata": {},
   "outputs": [],
   "source": [
    "## selecting a single feature and smaller time period for demonstration\n",
    "ts = ts_diff.loc['10/2021':'7/2022','cases'].copy().dropna()\n",
    "ts.plot();\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3a13f83e-6c84-4102-aec7-680603912207",
   "metadata": {},
   "outputs": [],
   "source": [
    "window = 7\n",
    "ts_mean = ts.rolling(window).mean()\n",
    "ts_mean\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "303d19ba-1763-4d76-b511-929c4e1de7a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "ax = ts.plot(label='Raw Daily Counts',lw=1)\n",
    "ts_mean.plot(label=f'{window} Day Moving Average',ax=ax,lw=3)\n",
    "ax.legend();\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cb4c3784-83fe-4430-aeb6-095ad770d0bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# we can also calculate rolling std()\n",
    "std = ts.rolling(window).std()\n",
    "std\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0f6430d7-7a23-4f21-8a95-e3ed1504467c",
   "metadata": {},
   "outputs": [],
   "source": [
    "## calculating +/- std\n",
    "ts_stats= pd.DataFrame({'mean':ts_mean,\n",
    "             'mean+std':ts_mean+std,\n",
    "             'mean-std':ts_mean-std})\n",
    "ts_stats = ts_stats.dropna()\n",
    "ts_stats\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "69c72718-939d-4e0a-b399-d14879effa7f",
   "metadata": {},
   "outputs": [],
   "source": [
    "## plot the rolling mean +/- the rolling std\n",
    "ax = ts_stats.plot(y='mean',lw=2)\n",
    "ts_stats.plot(y='mean+std',color='g',lw=0.5,ax=ax)\n",
    "ts_stats.plot(y='mean-std',color='g',lw=0.5,ax=ax)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ddf6dcbf-f101-4cb5-b477-142f5228f984",
   "metadata": {},
   "outputs": [],
   "source": [
    "## plot the rolling mean +/- the rolling std\n",
    "ax = ts_stats.plot(y='mean',lw=2)\n",
    "ax.fill_between(ts_stats.index, ts_stats['mean+std'], ts_stats['mean-std'], color='limegreen', alpha=0.5,zorder=0,label=\"mean+/-std\");\n",
    "ax.legend();\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "51640469-59cb-4aa1-8746-db747806d5fc",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "a6b5836b-ff29-4f90-8b2b-9d2d7e431c8e",
   "metadata": {},
   "source": [
    "# Normalizing Time Series"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ddba8387-7ba3-4740-b763-20c8c1cf97d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Define each state's cases\n",
    "ny_cases = df_ts.loc[\"NY\",'cases']\n",
    "ky_cases = df_ts.loc['KY','cases']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "36d14f9d-6200-49a5-a98e-11a54d6cf0b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "compare_ts = pd.DataFrame({'KY':ky_cases,\n",
    "                          \"NY\":ny_cases})\n",
    "compare_ts\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a2bede4b-89ab-4ccf-9bcc-ba4370aecb2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "compare_ts.plot();\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "15dbce07-159b-41c5-bfb0-309580cd77c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "compare_diff = compare_ts.diff().dropna()\n",
    "compare_diff\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "abcd1511-4d73-4872-a86a-76fefc656a37",
   "metadata": {},
   "outputs": [],
   "source": [
    "compare_diff.plot();\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cfa52894-6f18-44cb-99ec-ca739c6708b5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "93c9a9c8-0ac1-404c-895c-b89ec8e9524e",
   "metadata": {},
   "outputs": [],
   "source": [
    "compare_pct = compare_ts.pct_change(freq='D')*100\n",
    "compare_pct\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5c1a0fa4-3145-41d0-bfee-046c6d3802c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "plot_ts = compare_pct.loc['07/2021':]\n",
    "plot_ts\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c267a4ab-8ae4-4e83-a4c6-9abc5af3405e",
   "metadata": {},
   "outputs": [],
   "source": [
    "ax = plot_ts.plot(title='% Change in Cases',ylabel='%')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f533401-9491-4020-80be-0d226c334dd6",
   "metadata": {},
   "outputs": [],
   "source": [
    "compare_ts.loc['07/2021':].plot(title='Original Data - Cumulative Counts');\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "017bcf17-1c85-4a52-89a7-8c1993a34e36",
   "metadata": {},
   "outputs": [],
   "source": [
    "compare_diff.loc['07/2021':].rolling(7).mean().plot(title='New Cases');\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c341e06d-e5e7-4502-9374-5255b29c1ee8",
   "metadata": {},
   "outputs": [],
   "source": [
    "plot_ts = compare_pct.loc['07/2021':].rolling(window).mean()\n",
    "plot_ts.plot(title='% Change - 7 Day Moving Average');\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d2bae609-c02b-4f0d-8db0-85aa8d4302e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "us_pop = pd.read_csv('YOUR PATH')\n",
    "us_pop.head()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a63823ad-f5df-4e57-8a95-16f92acbc57c",
   "metadata": {},
   "outputs": [],
   "source": [
    "state_lookup = df[['state','state_code']]\n",
    "state_lookup = state_lookup.drop_duplicates(subset=['state']).reset_index(drop=True)\n",
    "state_lookup.head()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4978541e-7cc1-470a-8242-077c916d1611",
   "metadata": {},
   "outputs": [],
   "source": [
    "## merging the us pop with our state lookup\n",
    "merged_pop = pd.merge(us_pop[['STATE','POPESTIMATE2019']], state_lookup, left_on='STATE', right_on='state')\n",
    "# merged_pop = merged_pop.drop(columns='state').set_index('state_code')\n",
    "state_pop = merged_pop.set_index('state_code')['POPESTIMATE2019']\n",
    "state_pop.head()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f004bb70-de45-4da3-92bb-91db4c8c5c7c",
   "metadata": {},
   "outputs": [],
   "source": [
    "## example calc for KY\n",
    "compare_ts['KY']/state_pop.loc['KY']*100_000\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "216c48d6-1ac4-439e-99d0-3ab9ba7ff76c",
   "metadata": {},
   "outputs": [],
   "source": [
    "## preparing all columns using loop\n",
    "compare_pop = compare_ts.copy()\n",
    "for col in compare_ts.columns:\n",
    "    compare_pop[col] =( compare_pop[col] / state_pop.loc[col])*100_000\n",
    "compare_pop\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5e23c1cd-b13d-4122-8ee4-85f54c0ddbbd",
   "metadata": {},
   "outputs": [],
   "source": [
    "ax = compare_pop.plot(ylabel='Population-Adj. Cases',title='# of Cases Per 100K People');\n",
    "ax.yaxis.set_major_formatter(str_fmt)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cfa937e5-2819-4c65-bb5a-d3ca04e14e8b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9c456a1f-4986-46b9-8ef4-ffc46774ea8b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2b98c912-87b9-4828-8d99-a96d409d6de6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6731e2f6-0d6a-4752-b63f-b676f93958f2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a9f488e6-a8a9-4b7f-b539-ef7006621828",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f801bbe6-972b-4597-a57e-39cf16366b2a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "810d3c0d-b04e-4c1a-a00d-fa118efe4c1e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1d662e19-68cd-49f4-9512-ad69fa21c477",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2682706b-9bdd-4785-aaaf-28b7f8d323bc",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "705272e2-5c78-4a21-8487-f300ea8d34e8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eb90f72a-d876-4b10-b1ae-3ca23e6e4330",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6de63835-7450-41de-87ce-fe94c38afed3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2d1a13b6-a9a6-461c-b84a-eaacf4349522",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4c6bdaf9-92ae-4af4-bbef-7e738e275da5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python (dojo-env)",
   "language": "python",
   "name": "dojo-env"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
